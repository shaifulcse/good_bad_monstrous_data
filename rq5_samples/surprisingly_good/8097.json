{
  "origin": "codeshovel",
  "repositoryName": "docx4j",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/docx4j/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FontReader.java",
  "functionName": "endElement",
  "functionId": "endElement___uri-String__localName-String__qName-String",
  "sourceFilePath": "docx4j-core/src/main/java/org/docx4j/fonts/fop/fonts/FontReader.java",
  "functionStartLine": 239,
  "functionEndLine": 310,
  "numCommitsSeen": 4,
  "timeTaken": 665,
  "changeHistory": [
    "a440fc994771f87a66c1186134e990c646661e13",
    "053f6655ab35bae6eed9f81d466c6b0feaacfd71",
    "c9021fdc912cccadd839aea24b132ca922147258"
  ],
  "changeHistoryShort": {
    "a440fc994771f87a66c1186134e990c646661e13": "Yfilerename",
    "053f6655ab35bae6eed9f81d466c6b0feaacfd71": "Yfilerename",
    "c9021fdc912cccadd839aea24b132ca922147258": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a440fc994771f87a66c1186134e990c646661e13": {
      "type": "Yfilerename",
      "commitMessage": "Move to maven multi-module project (Work in progress)\n",
      "commitDate": "28/01/19 4:21 PM",
      "commitName": "a440fc994771f87a66c1186134e990c646661e13",
      "commitAuthor": "Jason Harrop",
      "commitDateOld": "25/01/19 9:27 PM",
      "commitNameOld": "1c0881d7159364ddd154a3c793ec33d869535a5e",
      "commitAuthorOld": "Jason Harrop",
      "daysBetweenCommits": 2.79,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public void endElement(String uri, String localName, String qName) throws SAXException {\n        String content \u003d text.toString().trim();\n        if (\"font-name\".equals(localName)) {\n            returnFont.setFontName(content);\n        } else if (\"full-name\".equals(localName)) {\n            returnFont.setFullName(content);\n        } else if (\"family-name\".equals(localName)) {\n            Set s \u003d new java.util.HashSet();\n            s.add(content);\n            returnFont.setFamilyNames(s);\n        } else if (\"ttc-name\".equals(localName) \u0026\u0026 isCID) {\n            multiFont.setTTCName(content);\n        } else if (\"encoding\".equals(localName)) {\n            if (singleFont !\u003d null \u0026\u0026 singleFont.getFontType() \u003d\u003d FontType.TYPE1) {\n                singleFont.setEncoding(content);\n            }\n        } else if (\"cap-height\".equals(localName)) {\n            returnFont.setCapHeight(getInt(content));\n        } else if (\"x-height\".equals(localName)) {\n            returnFont.setXHeight(getInt(content));\n        } else if (\"ascender\".equals(localName)) {\n            returnFont.setAscender(getInt(content));\n        } else if (\"descender\".equals(localName)) {\n            returnFont.setDescender(getInt(content));\n        } else if (\"left\".equals(localName)) {\n            int[] bbox \u003d returnFont.getFontBBox();\n            bbox[0] \u003d getInt(content);\n            returnFont.setFontBBox(bbox);\n        } else if (\"bottom\".equals(localName)) {\n            int[] bbox \u003d returnFont.getFontBBox();\n            bbox[1] \u003d getInt(content);\n            returnFont.setFontBBox(bbox);\n        } else if (\"right\".equals(localName)) {\n            int[] bbox \u003d returnFont.getFontBBox();\n            bbox[2] \u003d getInt(content);\n            returnFont.setFontBBox(bbox);\n        } else if (\"top\".equals(localName)) {\n            int[] bbox \u003d returnFont.getFontBBox();\n            bbox[3] \u003d getInt(content);\n            returnFont.setFontBBox(bbox);\n        } else if (\"first-char\".equals(localName)) {\n            returnFont.setFirstChar(getInt(content));\n        } else if (\"last-char\".equals(localName)) {\n            returnFont.setLastChar(getInt(content));\n        } else if (\"flags\".equals(localName)) {\n            returnFont.setFlags(getInt(content));\n        } else if (\"stemv\".equals(localName)) {\n            returnFont.setStemV(getInt(content));\n        } else if (\"italic-angle\".equals(localName)) {\n            returnFont.setItalicAngle(getInt(content));\n        } else if (\"missing-width\".equals(localName)) {\n            returnFont.setMissingWidth(getInt(content));\n        } else if (\"cid-type\".equals(localName)) {\n            multiFont.setCIDType(CIDFontType.byName(content));\n        } else if (\"default-width\".equals(localName)) {\n            multiFont.setDefaultWidth(getInt(content));\n        } else if (\"cid-widths\".equals(localName)) {\n            int[] wds \u003d new int[cidWidths.size()];\n            int j \u003d 0;\n            for (int count \u003d 0; count \u003c cidWidths.size(); count++) {\n                Integer i \u003d (Integer)cidWidths.get(count);\n                wds[j++] \u003d i.intValue();\n            }\n\n            //multiFont.addCIDWidthEntry(cidWidthIndex, wds);\n            multiFont.setWidthArray(wds);\n\n        } else if (\"bfranges\".equals(localName)) {\n            multiFont.setBFEntries((BFEntry[])bfranges.toArray(new BFEntry[0]));\n        }\n        text.setLength(0); //Reset text buffer (see characters())\n    }",
      "path": "docx4j-core/src/main/java/org/docx4j/fonts/fop/fonts/FontReader.java",
      "extendedDetails": {
        "oldPath": "src/main/java/org/docx4j/fonts/fop/fonts/FontReader.java",
        "newPath": "docx4j-core/src/main/java/org/docx4j/fonts/fop/fonts/FontReader.java"
      }
    },
    "053f6655ab35bae6eed9f81d466c6b0feaacfd71": {
      "type": "Yfilerename",
      "commitMessage": "Remove intermediate docx4j dir\n",
      "commitDate": "11/05/12 5:17 PM",
      "commitName": "053f6655ab35bae6eed9f81d466c6b0feaacfd71",
      "commitAuthor": "Jason Harrop",
      "commitDateOld": "10/05/12 5:18 PM",
      "commitNameOld": "5f7698e779bc00e5d9e066e3be1fdb02c20bfd80",
      "commitAuthorOld": "Jason Harrop",
      "daysBetweenCommits": 1.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public void endElement(String uri, String localName, String qName) throws SAXException {\n        String content \u003d text.toString().trim();\n        if (\"font-name\".equals(localName)) {\n            returnFont.setFontName(content);\n        } else if (\"full-name\".equals(localName)) {\n            returnFont.setFullName(content);\n        } else if (\"family-name\".equals(localName)) {\n            Set s \u003d new java.util.HashSet();\n            s.add(content);\n            returnFont.setFamilyNames(s);\n        } else if (\"ttc-name\".equals(localName) \u0026\u0026 isCID) {\n            multiFont.setTTCName(content);\n        } else if (\"encoding\".equals(localName)) {\n            if (singleFont !\u003d null \u0026\u0026 singleFont.getFontType() \u003d\u003d FontType.TYPE1) {\n                singleFont.setEncoding(content);\n            }\n        } else if (\"cap-height\".equals(localName)) {\n            returnFont.setCapHeight(getInt(content));\n        } else if (\"x-height\".equals(localName)) {\n            returnFont.setXHeight(getInt(content));\n        } else if (\"ascender\".equals(localName)) {\n            returnFont.setAscender(getInt(content));\n        } else if (\"descender\".equals(localName)) {\n            returnFont.setDescender(getInt(content));\n        } else if (\"left\".equals(localName)) {\n            int[] bbox \u003d returnFont.getFontBBox();\n            bbox[0] \u003d getInt(content);\n            returnFont.setFontBBox(bbox);\n        } else if (\"bottom\".equals(localName)) {\n            int[] bbox \u003d returnFont.getFontBBox();\n            bbox[1] \u003d getInt(content);\n            returnFont.setFontBBox(bbox);\n        } else if (\"right\".equals(localName)) {\n            int[] bbox \u003d returnFont.getFontBBox();\n            bbox[2] \u003d getInt(content);\n            returnFont.setFontBBox(bbox);\n        } else if (\"top\".equals(localName)) {\n            int[] bbox \u003d returnFont.getFontBBox();\n            bbox[3] \u003d getInt(content);\n            returnFont.setFontBBox(bbox);\n        } else if (\"first-char\".equals(localName)) {\n            returnFont.setFirstChar(getInt(content));\n        } else if (\"last-char\".equals(localName)) {\n            returnFont.setLastChar(getInt(content));\n        } else if (\"flags\".equals(localName)) {\n            returnFont.setFlags(getInt(content));\n        } else if (\"stemv\".equals(localName)) {\n            returnFont.setStemV(getInt(content));\n        } else if (\"italic-angle\".equals(localName)) {\n            returnFont.setItalicAngle(getInt(content));\n        } else if (\"missing-width\".equals(localName)) {\n            returnFont.setMissingWidth(getInt(content));\n        } else if (\"cid-type\".equals(localName)) {\n            multiFont.setCIDType(CIDFontType.byName(content));\n        } else if (\"default-width\".equals(localName)) {\n            multiFont.setDefaultWidth(getInt(content));\n        } else if (\"cid-widths\".equals(localName)) {\n            int[] wds \u003d new int[cidWidths.size()];\n            int j \u003d 0;\n            for (int count \u003d 0; count \u003c cidWidths.size(); count++) {\n                Integer i \u003d (Integer)cidWidths.get(count);\n                wds[j++] \u003d i.intValue();\n            }\n\n            //multiFont.addCIDWidthEntry(cidWidthIndex, wds);\n            multiFont.setWidthArray(wds);\n\n        } else if (\"bfranges\".equals(localName)) {\n            multiFont.setBFEntries((BFEntry[])bfranges.toArray(new BFEntry[0]));\n        }\n        text.setLength(0); //Reset text buffer (see characters())\n    }",
      "path": "src/main/java/org/docx4j/fonts/fop/fonts/FontReader.java",
      "extendedDetails": {
        "oldPath": "docx4j/src/main/java/org/docx4j/fonts/fop/fonts/FontReader.java",
        "newPath": "src/main/java/org/docx4j/fonts/fop/fonts/FontReader.java"
      }
    },
    "c9021fdc912cccadd839aea24b132ca922147258": {
      "type": "Yintroduced",
      "commitMessage": "Include source code for fop-fonts, as org.docx4j.fonts.fop.\nUse FOP 1.0.\nMove panose to org.docx4j.fonts.foray\nAdd LICENSE, NOTICE\n",
      "commitDate": "21/09/10 5:50 AM",
      "commitName": "c9021fdc912cccadd839aea24b132ca922147258",
      "commitAuthor": "Jason Harrop",
      "diff": "@@ -0,0 +1,72 @@\n+    public void endElement(String uri, String localName, String qName) throws SAXException {\n+        String content \u003d text.toString().trim();\n+        if (\"font-name\".equals(localName)) {\n+            returnFont.setFontName(content);\n+        } else if (\"full-name\".equals(localName)) {\n+            returnFont.setFullName(content);\n+        } else if (\"family-name\".equals(localName)) {\n+            Set s \u003d new java.util.HashSet();\n+            s.add(content);\n+            returnFont.setFamilyNames(s);\n+        } else if (\"ttc-name\".equals(localName) \u0026\u0026 isCID) {\n+            multiFont.setTTCName(content);\n+        } else if (\"encoding\".equals(localName)) {\n+            if (singleFont !\u003d null \u0026\u0026 singleFont.getFontType() \u003d\u003d FontType.TYPE1) {\n+                singleFont.setEncoding(content);\n+            }\n+        } else if (\"cap-height\".equals(localName)) {\n+            returnFont.setCapHeight(getInt(content));\n+        } else if (\"x-height\".equals(localName)) {\n+            returnFont.setXHeight(getInt(content));\n+        } else if (\"ascender\".equals(localName)) {\n+            returnFont.setAscender(getInt(content));\n+        } else if (\"descender\".equals(localName)) {\n+            returnFont.setDescender(getInt(content));\n+        } else if (\"left\".equals(localName)) {\n+            int[] bbox \u003d returnFont.getFontBBox();\n+            bbox[0] \u003d getInt(content);\n+            returnFont.setFontBBox(bbox);\n+        } else if (\"bottom\".equals(localName)) {\n+            int[] bbox \u003d returnFont.getFontBBox();\n+            bbox[1] \u003d getInt(content);\n+            returnFont.setFontBBox(bbox);\n+        } else if (\"right\".equals(localName)) {\n+            int[] bbox \u003d returnFont.getFontBBox();\n+            bbox[2] \u003d getInt(content);\n+            returnFont.setFontBBox(bbox);\n+        } else if (\"top\".equals(localName)) {\n+            int[] bbox \u003d returnFont.getFontBBox();\n+            bbox[3] \u003d getInt(content);\n+            returnFont.setFontBBox(bbox);\n+        } else if (\"first-char\".equals(localName)) {\n+            returnFont.setFirstChar(getInt(content));\n+        } else if (\"last-char\".equals(localName)) {\n+            returnFont.setLastChar(getInt(content));\n+        } else if (\"flags\".equals(localName)) {\n+            returnFont.setFlags(getInt(content));\n+        } else if (\"stemv\".equals(localName)) {\n+            returnFont.setStemV(getInt(content));\n+        } else if (\"italic-angle\".equals(localName)) {\n+            returnFont.setItalicAngle(getInt(content));\n+        } else if (\"missing-width\".equals(localName)) {\n+            returnFont.setMissingWidth(getInt(content));\n+        } else if (\"cid-type\".equals(localName)) {\n+            multiFont.setCIDType(CIDFontType.byName(content));\n+        } else if (\"default-width\".equals(localName)) {\n+            multiFont.setDefaultWidth(getInt(content));\n+        } else if (\"cid-widths\".equals(localName)) {\n+            int[] wds \u003d new int[cidWidths.size()];\n+            int j \u003d 0;\n+            for (int count \u003d 0; count \u003c cidWidths.size(); count++) {\n+                Integer i \u003d (Integer)cidWidths.get(count);\n+                wds[j++] \u003d i.intValue();\n+            }\n+\n+            //multiFont.addCIDWidthEntry(cidWidthIndex, wds);\n+            multiFont.setWidthArray(wds);\n+\n+        } else if (\"bfranges\".equals(localName)) {\n+            multiFont.setBFEntries((BFEntry[])bfranges.toArray(new BFEntry[0]));\n+        }\n+        text.setLength(0); //Reset text buffer (see characters())\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public void endElement(String uri, String localName, String qName) throws SAXException {\n        String content \u003d text.toString().trim();\n        if (\"font-name\".equals(localName)) {\n            returnFont.setFontName(content);\n        } else if (\"full-name\".equals(localName)) {\n            returnFont.setFullName(content);\n        } else if (\"family-name\".equals(localName)) {\n            Set s \u003d new java.util.HashSet();\n            s.add(content);\n            returnFont.setFamilyNames(s);\n        } else if (\"ttc-name\".equals(localName) \u0026\u0026 isCID) {\n            multiFont.setTTCName(content);\n        } else if (\"encoding\".equals(localName)) {\n            if (singleFont !\u003d null \u0026\u0026 singleFont.getFontType() \u003d\u003d FontType.TYPE1) {\n                singleFont.setEncoding(content);\n            }\n        } else if (\"cap-height\".equals(localName)) {\n            returnFont.setCapHeight(getInt(content));\n        } else if (\"x-height\".equals(localName)) {\n            returnFont.setXHeight(getInt(content));\n        } else if (\"ascender\".equals(localName)) {\n            returnFont.setAscender(getInt(content));\n        } else if (\"descender\".equals(localName)) {\n            returnFont.setDescender(getInt(content));\n        } else if (\"left\".equals(localName)) {\n            int[] bbox \u003d returnFont.getFontBBox();\n            bbox[0] \u003d getInt(content);\n            returnFont.setFontBBox(bbox);\n        } else if (\"bottom\".equals(localName)) {\n            int[] bbox \u003d returnFont.getFontBBox();\n            bbox[1] \u003d getInt(content);\n            returnFont.setFontBBox(bbox);\n        } else if (\"right\".equals(localName)) {\n            int[] bbox \u003d returnFont.getFontBBox();\n            bbox[2] \u003d getInt(content);\n            returnFont.setFontBBox(bbox);\n        } else if (\"top\".equals(localName)) {\n            int[] bbox \u003d returnFont.getFontBBox();\n            bbox[3] \u003d getInt(content);\n            returnFont.setFontBBox(bbox);\n        } else if (\"first-char\".equals(localName)) {\n            returnFont.setFirstChar(getInt(content));\n        } else if (\"last-char\".equals(localName)) {\n            returnFont.setLastChar(getInt(content));\n        } else if (\"flags\".equals(localName)) {\n            returnFont.setFlags(getInt(content));\n        } else if (\"stemv\".equals(localName)) {\n            returnFont.setStemV(getInt(content));\n        } else if (\"italic-angle\".equals(localName)) {\n            returnFont.setItalicAngle(getInt(content));\n        } else if (\"missing-width\".equals(localName)) {\n            returnFont.setMissingWidth(getInt(content));\n        } else if (\"cid-type\".equals(localName)) {\n            multiFont.setCIDType(CIDFontType.byName(content));\n        } else if (\"default-width\".equals(localName)) {\n            multiFont.setDefaultWidth(getInt(content));\n        } else if (\"cid-widths\".equals(localName)) {\n            int[] wds \u003d new int[cidWidths.size()];\n            int j \u003d 0;\n            for (int count \u003d 0; count \u003c cidWidths.size(); count++) {\n                Integer i \u003d (Integer)cidWidths.get(count);\n                wds[j++] \u003d i.intValue();\n            }\n\n            //multiFont.addCIDWidthEntry(cidWidthIndex, wds);\n            multiFont.setWidthArray(wds);\n\n        } else if (\"bfranges\".equals(localName)) {\n            multiFont.setBFEntries((BFEntry[])bfranges.toArray(new BFEntry[0]));\n        }\n        text.setLength(0); //Reset text buffer (see characters())\n    }",
      "path": "docx4j/src/main/java/org/docx4j/fonts/fop/fonts/FontReader.java"
    }
  }
}