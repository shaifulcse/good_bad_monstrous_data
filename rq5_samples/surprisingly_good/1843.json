{
  "origin": "codeshovel",
  "repositoryName": "lombok",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/lombok/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "PublicApiCreatorApp.java",
  "functionName": "writeApiJar",
  "functionId": "writeApiJar___outFile-File",
  "sourceFilePath": "src/core/lombok/core/PublicApiCreatorApp.java",
  "functionStartLine": 85,
  "functionEndLine": 160,
  "numCommitsSeen": 4,
  "timeTaken": 231,
  "changeHistory": [
    "5dad9c39b8e6a6074ffd5f24e252534f099a7466",
    "6ca2a91d6bb7054328a845771af0a4e618002f14"
  ],
  "changeHistoryShort": {
    "5dad9c39b8e6a6074ffd5f24e252534f099a7466": "Ybodychange",
    "6ca2a91d6bb7054328a845771af0a4e618002f14": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5dad9c39b8e6a6074ffd5f24e252534f099a7466": {
      "type": "Ybodychange",
      "commitMessage": "the public API generator now skips ConfigurationKeys classes which really arenâ€™t needed and kinda clutter up the jar (There are a lot of class files generated by that one source file!).\n",
      "commitDate": "29/05/17 12:01 PM",
      "commitName": "5dad9c39b8e6a6074ffd5f24e252534f099a7466",
      "commitAuthor": "Reinier Zwitserloot",
      "commitDateOld": "28/02/14 5:55 PM",
      "commitNameOld": "fbab1ca77cb8306843e26c5bad91186b34563282",
      "commitAuthorOld": "Reinier Zwitserloot",
      "daysBetweenCommits": 1185.71,
      "commitsBetweenForRepo": 421,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,76 +1,76 @@\n \tprivate int writeApiJar(File outFile) throws Exception {\n \t\tFile selfRaw \u003d findOurJar();\n \t\tif (selfRaw \u003d\u003d null) {\n \t\t\tSystem.err.println(\"The publicApi option only works if lombok is a jar.\");\n \t\t\treturn 2;\n \t\t}\n \t\t\n \t\tList\u003cString\u003e toCopy \u003d new ArrayList\u003cString\u003e();\n \t\tJarFile self \u003d new JarFile(selfRaw);\n \t\ttry {\n \t\t\tEnumeration\u003cJarEntry\u003e entries \u003d self.entries();\n \t\t\t\n \t\t\twhile (entries.hasMoreElements()) {\n \t\t\t\tJarEntry entry \u003d entries.nextElement();\n \t\t\t\tString name \u003d entry.getName();\n \t\t\t\tif (!name.startsWith(\"lombok/\")) continue;\n \t\t\t\tif (name.endsWith(\"/package-info.class\")) continue;\n \t\t\t\tif (!name.endsWith(\".class\")) continue;\n \t\t\t\t\n \t\t\t\tString subName \u003d name.substring(7, name.length() - 6);\n \t\t\t\tint firstSlash \u003d subName.indexOf(\u0027/\u0027);\n \t\t\t\tif (firstSlash \u003d\u003d -1) {\n \t\t\t\t\t// direct member of the lombok package.\n-\t\t\t\t\ttoCopy.add(name);\n+\t\t\t\t\tif (!subName.startsWith(\"ConfigurationKeys\")) toCopy.add(name);\n \t\t\t\t\tcontinue;\n \t\t\t\t}\n \t\t\t\tString topPkg \u003d subName.substring(0, firstSlash);\n \t\t\t\tif (\"extern\".equals(topPkg) || \"experimental\".equals(topPkg)) {\n \t\t\t\t\ttoCopy.add(name);\n \t\t\t\t}\n \t\t\t}\n \t\t} finally {\n \t\t\tself.close();\n \t\t}\n \t\t\n \t\tif (toCopy.isEmpty()) {\n \t\t\tSystem.out.println(\"Not generating lombok-api.jar: No lombok api classes required!\");\n \t\t\treturn 1;\n \t\t}\n \t\t\n \t\tOutputStream out \u003d new FileOutputStream(outFile);\n \t\tboolean success \u003d false;\n \t\ttry {\n \t\t\tJarOutputStream jar \u003d new JarOutputStream(out);\n \t\t\tfor (String resourceName : toCopy) {\n \t\t\t\tInputStream in \u003d Lombok.class.getResourceAsStream(\"/\" + resourceName);\n \t\t\t\ttry {\n \t\t\t\t\tif (in \u003d\u003d null) {\n \t\t\t\t\t\tthrow new Fail(String.format(\"api class %s cannot be found\", resourceName));\n \t\t\t\t\t}\n \t\t\t\t\twriteIntoJar(jar, resourceName, in);\n \t\t\t\t} finally {\n \t\t\t\t\tif (in !\u003d null) in.close();\n \t\t\t\t}\n \t\t\t}\n \t\t\tjar.close();\n \t\t\tout.close();\n \t\t\t\n \t\t\tSystem.out.println(\"Successfully created: \" + canonical(outFile));\n \t\t\t\n \t\t\treturn 0;\n \t\t} catch (Throwable t) {\n \t\t\ttry { out.close();} catch (Throwable ignore) {}\n \t\t\tif (!success) outFile.delete();\n \t\t\tif (t instanceof Fail) {\n \t\t\t\tSystem.err.println(t.getMessage());\n \t\t\t\treturn 1;\n \t\t\t} else if (t instanceof Exception) {\n \t\t\t\tthrow (Exception)t;\n \t\t\t} else if (t instanceof Error) {\n \t\t\t\tthrow (Error)t;\n \t\t\t} else {\n \t\t\t\tthrow new Exception(t);\n \t\t\t}\n \t\t}\n \t}\n\\ No newline at end of file\n",
      "actualSource": "\tprivate int writeApiJar(File outFile) throws Exception {\n\t\tFile selfRaw \u003d findOurJar();\n\t\tif (selfRaw \u003d\u003d null) {\n\t\t\tSystem.err.println(\"The publicApi option only works if lombok is a jar.\");\n\t\t\treturn 2;\n\t\t}\n\t\t\n\t\tList\u003cString\u003e toCopy \u003d new ArrayList\u003cString\u003e();\n\t\tJarFile self \u003d new JarFile(selfRaw);\n\t\ttry {\n\t\t\tEnumeration\u003cJarEntry\u003e entries \u003d self.entries();\n\t\t\t\n\t\t\twhile (entries.hasMoreElements()) {\n\t\t\t\tJarEntry entry \u003d entries.nextElement();\n\t\t\t\tString name \u003d entry.getName();\n\t\t\t\tif (!name.startsWith(\"lombok/\")) continue;\n\t\t\t\tif (name.endsWith(\"/package-info.class\")) continue;\n\t\t\t\tif (!name.endsWith(\".class\")) continue;\n\t\t\t\t\n\t\t\t\tString subName \u003d name.substring(7, name.length() - 6);\n\t\t\t\tint firstSlash \u003d subName.indexOf(\u0027/\u0027);\n\t\t\t\tif (firstSlash \u003d\u003d -1) {\n\t\t\t\t\t// direct member of the lombok package.\n\t\t\t\t\tif (!subName.startsWith(\"ConfigurationKeys\")) toCopy.add(name);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tString topPkg \u003d subName.substring(0, firstSlash);\n\t\t\t\tif (\"extern\".equals(topPkg) || \"experimental\".equals(topPkg)) {\n\t\t\t\t\ttoCopy.add(name);\n\t\t\t\t}\n\t\t\t}\n\t\t} finally {\n\t\t\tself.close();\n\t\t}\n\t\t\n\t\tif (toCopy.isEmpty()) {\n\t\t\tSystem.out.println(\"Not generating lombok-api.jar: No lombok api classes required!\");\n\t\t\treturn 1;\n\t\t}\n\t\t\n\t\tOutputStream out \u003d new FileOutputStream(outFile);\n\t\tboolean success \u003d false;\n\t\ttry {\n\t\t\tJarOutputStream jar \u003d new JarOutputStream(out);\n\t\t\tfor (String resourceName : toCopy) {\n\t\t\t\tInputStream in \u003d Lombok.class.getResourceAsStream(\"/\" + resourceName);\n\t\t\t\ttry {\n\t\t\t\t\tif (in \u003d\u003d null) {\n\t\t\t\t\t\tthrow new Fail(String.format(\"api class %s cannot be found\", resourceName));\n\t\t\t\t\t}\n\t\t\t\t\twriteIntoJar(jar, resourceName, in);\n\t\t\t\t} finally {\n\t\t\t\t\tif (in !\u003d null) in.close();\n\t\t\t\t}\n\t\t\t}\n\t\t\tjar.close();\n\t\t\tout.close();\n\t\t\t\n\t\t\tSystem.out.println(\"Successfully created: \" + canonical(outFile));\n\t\t\t\n\t\t\treturn 0;\n\t\t} catch (Throwable t) {\n\t\t\ttry { out.close();} catch (Throwable ignore) {}\n\t\t\tif (!success) outFile.delete();\n\t\t\tif (t instanceof Fail) {\n\t\t\t\tSystem.err.println(t.getMessage());\n\t\t\t\treturn 1;\n\t\t\t} else if (t instanceof Exception) {\n\t\t\t\tthrow (Exception)t;\n\t\t\t} else if (t instanceof Error) {\n\t\t\t\tthrow (Error)t;\n\t\t\t} else {\n\t\t\t\tthrow new Exception(t);\n\t\t\t}\n\t\t}\n\t}",
      "path": "src/core/lombok/core/PublicApiCreatorApp.java",
      "extendedDetails": {}
    },
    "6ca2a91d6bb7054328a845771af0a4e618002f14": {
      "type": "Yintroduced",
      "commitMessage": "Added documentation (and a minor tidbit of support) for android.\n",
      "commitDate": "19/03/12 2:04 PM",
      "commitName": "6ca2a91d6bb7054328a845771af0a4e618002f14",
      "commitAuthor": "Reinier Zwitserloot",
      "diff": "@@ -0,0 +1,76 @@\n+\tprivate int writeApiJar(File outFile) throws Exception {\n+\t\tFile selfRaw \u003d findOurJar();\n+\t\tif (selfRaw \u003d\u003d null) {\n+\t\t\tSystem.err.println(\"The publicApi option only works if lombok is a jar.\");\n+\t\t\treturn 2;\n+\t\t}\n+\t\t\n+\t\tList\u003cString\u003e toCopy \u003d new ArrayList\u003cString\u003e();\n+\t\tJarFile self \u003d new JarFile(selfRaw);\n+\t\ttry {\n+\t\t\tEnumeration\u003cJarEntry\u003e entries \u003d self.entries();\n+\t\t\t\n+\t\t\twhile (entries.hasMoreElements()) {\n+\t\t\t\tJarEntry entry \u003d entries.nextElement();\n+\t\t\t\tString name \u003d entry.getName();\n+\t\t\t\tif (!name.startsWith(\"lombok/\")) continue;\n+\t\t\t\tif (name.endsWith(\"/package-info.class\")) continue;\n+\t\t\t\tif (!name.endsWith(\".class\")) continue;\n+\t\t\t\t\n+\t\t\t\tString subName \u003d name.substring(7, name.length() - 6);\n+\t\t\t\tint firstSlash \u003d subName.indexOf(\u0027/\u0027);\n+\t\t\t\tif (firstSlash \u003d\u003d -1) {\n+\t\t\t\t\t// direct member of the lombok package.\n+\t\t\t\t\ttoCopy.add(name);\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\t\t\t\tString topPkg \u003d subName.substring(0, firstSlash);\n+\t\t\t\tif (\"extern\".equals(topPkg) || \"experimental\".equals(topPkg)) {\n+\t\t\t\t\ttoCopy.add(name);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} finally {\n+\t\t\tself.close();\n+\t\t}\n+\t\t\n+\t\tif (toCopy.isEmpty()) {\n+\t\t\tSystem.out.println(\"Not generating lombok-api.jar: No lombok api classes required!\");\n+\t\t\treturn 1;\n+\t\t}\n+\t\t\n+\t\tOutputStream out \u003d new FileOutputStream(outFile);\n+\t\tboolean success \u003d false;\n+\t\ttry {\n+\t\t\tJarOutputStream jar \u003d new JarOutputStream(out);\n+\t\t\tfor (String resourceName : toCopy) {\n+\t\t\t\tInputStream in \u003d Lombok.class.getResourceAsStream(\"/\" + resourceName);\n+\t\t\t\ttry {\n+\t\t\t\t\tif (in \u003d\u003d null) {\n+\t\t\t\t\t\tthrow new Fail(String.format(\"api class %s cannot be found\", resourceName));\n+\t\t\t\t\t}\n+\t\t\t\t\twriteIntoJar(jar, resourceName, in);\n+\t\t\t\t} finally {\n+\t\t\t\t\tif (in !\u003d null) in.close();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tjar.close();\n+\t\t\tout.close();\n+\t\t\t\n+\t\t\tSystem.out.println(\"Successfully created: \" + canonical(outFile));\n+\t\t\t\n+\t\t\treturn 0;\n+\t\t} catch (Throwable t) {\n+\t\t\ttry { out.close();} catch (Throwable ignore) {}\n+\t\t\tif (!success) outFile.delete();\n+\t\t\tif (t instanceof Fail) {\n+\t\t\t\tSystem.err.println(t.getMessage());\n+\t\t\t\treturn 1;\n+\t\t\t} else if (t instanceof Exception) {\n+\t\t\t\tthrow (Exception)t;\n+\t\t\t} else if (t instanceof Error) {\n+\t\t\t\tthrow (Error)t;\n+\t\t\t} else {\n+\t\t\t\tthrow new Exception(t);\n+\t\t\t}\n+\t\t}\n+\t}\n\\ No newline at end of file\n",
      "actualSource": "\tprivate int writeApiJar(File outFile) throws Exception {\n\t\tFile selfRaw \u003d findOurJar();\n\t\tif (selfRaw \u003d\u003d null) {\n\t\t\tSystem.err.println(\"The publicApi option only works if lombok is a jar.\");\n\t\t\treturn 2;\n\t\t}\n\t\t\n\t\tList\u003cString\u003e toCopy \u003d new ArrayList\u003cString\u003e();\n\t\tJarFile self \u003d new JarFile(selfRaw);\n\t\ttry {\n\t\t\tEnumeration\u003cJarEntry\u003e entries \u003d self.entries();\n\t\t\t\n\t\t\twhile (entries.hasMoreElements()) {\n\t\t\t\tJarEntry entry \u003d entries.nextElement();\n\t\t\t\tString name \u003d entry.getName();\n\t\t\t\tif (!name.startsWith(\"lombok/\")) continue;\n\t\t\t\tif (name.endsWith(\"/package-info.class\")) continue;\n\t\t\t\tif (!name.endsWith(\".class\")) continue;\n\t\t\t\t\n\t\t\t\tString subName \u003d name.substring(7, name.length() - 6);\n\t\t\t\tint firstSlash \u003d subName.indexOf(\u0027/\u0027);\n\t\t\t\tif (firstSlash \u003d\u003d -1) {\n\t\t\t\t\t// direct member of the lombok package.\n\t\t\t\t\ttoCopy.add(name);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tString topPkg \u003d subName.substring(0, firstSlash);\n\t\t\t\tif (\"extern\".equals(topPkg) || \"experimental\".equals(topPkg)) {\n\t\t\t\t\ttoCopy.add(name);\n\t\t\t\t}\n\t\t\t}\n\t\t} finally {\n\t\t\tself.close();\n\t\t}\n\t\t\n\t\tif (toCopy.isEmpty()) {\n\t\t\tSystem.out.println(\"Not generating lombok-api.jar: No lombok api classes required!\");\n\t\t\treturn 1;\n\t\t}\n\t\t\n\t\tOutputStream out \u003d new FileOutputStream(outFile);\n\t\tboolean success \u003d false;\n\t\ttry {\n\t\t\tJarOutputStream jar \u003d new JarOutputStream(out);\n\t\t\tfor (String resourceName : toCopy) {\n\t\t\t\tInputStream in \u003d Lombok.class.getResourceAsStream(\"/\" + resourceName);\n\t\t\t\ttry {\n\t\t\t\t\tif (in \u003d\u003d null) {\n\t\t\t\t\t\tthrow new Fail(String.format(\"api class %s cannot be found\", resourceName));\n\t\t\t\t\t}\n\t\t\t\t\twriteIntoJar(jar, resourceName, in);\n\t\t\t\t} finally {\n\t\t\t\t\tif (in !\u003d null) in.close();\n\t\t\t\t}\n\t\t\t}\n\t\t\tjar.close();\n\t\t\tout.close();\n\t\t\t\n\t\t\tSystem.out.println(\"Successfully created: \" + canonical(outFile));\n\t\t\t\n\t\t\treturn 0;\n\t\t} catch (Throwable t) {\n\t\t\ttry { out.close();} catch (Throwable ignore) {}\n\t\t\tif (!success) outFile.delete();\n\t\t\tif (t instanceof Fail) {\n\t\t\t\tSystem.err.println(t.getMessage());\n\t\t\t\treturn 1;\n\t\t\t} else if (t instanceof Exception) {\n\t\t\t\tthrow (Exception)t;\n\t\t\t} else if (t instanceof Error) {\n\t\t\t\tthrow (Error)t;\n\t\t\t} else {\n\t\t\t\tthrow new Exception(t);\n\t\t\t}\n\t\t}\n\t}",
      "path": "src/core/lombok/core/PublicApiCreatorApp.java"
    }
  }
}